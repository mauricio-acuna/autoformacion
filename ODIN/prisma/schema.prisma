// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  properties   Property[]
  favorites    Favorite[]
  conversations Conversation[]
  messages     Message[]
  notifications Notification[]
  reviews      Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Property {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  price       Float
  currency    String      @default("EUR")
  type        PropertyType
  category    PropertyCategory
  status      PropertyStatus @default(AVAILABLE)
  
  // Location
  address     String
  city        String
  province    String
  postalCode  String
  latitude    Float?
  longitude   Float?
  
  // Details
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  yearBuilt   Int?
  
  // AI Generated
  aiDescription String?     @db.Text
  aiValuation   Float?
  
  // Media
  images      PropertyImage[]
  virtualTour String?
  
  // Metadata
  featured    Boolean     @default(false)
  views       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])
  favorites   Favorite[]
  reviews     Review[]

  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  order      Int      @default(0)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("property_images")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("favorites")
}

model Conversation {
  id          String    @id @default(cuid())
  propertyId  String?
  participants String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  messages Message[]
  users    User[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  senderId       String
  conversationId String
  readAt         DateTime?
  createdAt      DateTime     @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String            @id @default(cuid())
  title     String
  message   String            @db.Text
  type      NotificationType
  read      Boolean           @default(false)
  userId    String
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int      // 1-5
  comment    String?  @db.Text
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("reviews")
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  TOWNHOUSE
  PENTHOUSE
  STUDIO
  DUPLEX
  COMMERCIAL
  OFFICE
  WAREHOUSE
  LAND
}

enum PropertyCategory {
  SALE
  RENT
  VACATION_RENTAL
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  RESERVED
  UNDER_CONSTRUCTION
}

enum NotificationType {
  SYSTEM
  MESSAGE
  PROPERTY_UPDATE
  FAVORITE_UPDATE
  REVIEW
}
